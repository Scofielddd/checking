apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'bottom-bar'

    publishedGroupId = 'com.roughike'
    libraryName = 'bottom-bar'
    artifact = 'bottom-bar'

    libraryDescription = 'A custom view component that mimics the Material Design "Bottom navigation" pattern.'

    siteUrl = 'https://github.com/roughike/BottomBar'
    gitUrl = 'https://github.com/roughike/BottomBar.git'

    libraryVersion = '2.0.2'

    developerId = 'roughike'
    developerName = 'Iiro Krankka'
    developerEmail = 'iiro.krankka@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 25
    buildToolsVersion "21.1.2"


    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.mockito:mockito-core:1.+'
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"

    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:design:25.0.0'
}



group = publishedGroupId                               // Maven Group ID for the artifact

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
File localProps = project.rootProject.file('local.properties')

if (localProps.exists()) {
    Properties properties = new Properties()
    properties.load(localProps.newDataInputStream())
}